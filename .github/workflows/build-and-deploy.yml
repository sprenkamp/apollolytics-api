name: CI/CD Pipeline

on:
  push:
    branches:
      - 'main'
      - 'feature/cicd'

jobs:
  build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push FE
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/apollolytics-api:latest

  deploy:
    name: Deploy to AWS EC2 Instance
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@v1.1.1
        with:
          # AWS access key id
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS secret access key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # Where EC2 instance is
          aws-region: ${{ secrets.AWS_REGION }}
          # AWS EC2 Instance id or ids
          instance-ids: ${{ secrets.AWS_INSTANCE_ID }}
          # Bash commands you want to execute
          command: |
            # Stop and remove the existing container
            sudo docker stop apollolytics-api || true
            sudo docker rm apollolytics-api || true
            
            # Pull the latest image from Docker Hub
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/apollolytics-api:latest
            
            # Run the new container for apollolytics-api
            sudo docker run -d --name apollolytics-api --restart always -p 8000:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/apollolytics-api:latest
            
            # Clean up unused images
            sudo docker image prune -af
          # Comment for Send-Command
          comment: Deploys the latest Docker images for book-portal and proxy on the EC2 instance.
